1️⃣  CREATE DATABASE IF NOT EXISTS database_name; - cretae data base

2️⃣  DROP DATABASE IF EXISTS database_name; - delete database

3️⃣  USE database_name;  - create table in perticuler database

4️⃣  CREATE TABLE table_name(
    column_name1 datatype constraint,
    column_name2 datatype constraint,
    column_name3 datatype constraint,
); - create table

5️⃣ INSERT INTO table_name 
    VALUES
    (101,"tony",19),
    (102,"steve",20);  - insert data in table


6️⃣ SELECT * FROM table_name; - see data

7️⃣ SHOW DATABASES; show all data bases

8️⃣ USE database_name;
    SHOW TABLES; - show all tables



-------------🚀 Table Queries 🚀--------------

0️⃣  USE database_name; 

1️⃣ CREATE TABLE table_name(
    column_name1 datatype constraint,
    column_name2 datatype constraint,
    column_name3 datatype constraint,
    ); - create table


  Constraints -
   🔸NOT NULL - columns cannot have a null values 

   🔸UNIQUE - all values in columns are different 

   🔸DEFAULT - sets the default values of a columns

   🔸CHECK - it can limit the values allowed in a column

   PRIMARY KEY - makes a column unique & not null but used only for one
   CRETE TABLE temp(
    id int not null,
    PRIMARY KEY (id)
   )

   FOREIGN KEY prevent actions that would destroy links between tables 
   CREATE TABLE temp (
    cust_id int,
    FOREIGN KEY (cust_id) REFERENCES customer(id)
   )
    

2️⃣ INSERT INTO table_name (column1,column2)
        VALUES 
        (col1_v1,col2_v1), 
        (col1_v2,col2_v12), 


3️⃣  SELECT col1,col2 FROM table_name;     - show selected table data    
    SELECT * FROM table_name;             - show all table data 
    SELECT DISTINCT col FROM table_name;  - show unique table data


4️⃣  UPDATE - to update existing rows
     
     Exp:  SET SQL_SAFE_UPDATES = 0;
           UPDATE user
           SET followers = 600
           WHERE age = 16;


5️⃣  DELETE - to delete existing rows
     
     Exp: DELETE FROM user
          WHERE age = 14;  


6️⃣  ALTER - to change the schema
 
        🔸ADD COLUMN column_name 
        🔸DROP COLUMN column_name
        🔸RENAME TO table_name
        🔸CHANGE COLUMN old_name new_name new_datatype new_constraint;
        🔸MODIFY col_name new_datatype new_constraint;

      Exp: ALTER TABLE user
           ADD COLUMN city VARCHAR(25) DEFAULT "Delhi";

      Exp: ALTER TABLE user
           DROP COLUMN age;

      Exp: ALTER TABLE user
           RENAME TO instaUser;

      Exp: ALTER TABLE instaUser
           CHANGE COLUMN followers subscribe INT DEFAULT 0;

      Exp: ALTER TABLE instaUser
           MODIFY subscribe INT DEFAULT 5;



7️⃣ TRUNCATE TABLE - to delete table's data

      Exp: TRUNCATE TABLE instaUser



---------------🚀 Clause 🚀----------------------

1️⃣ WHERE Clause - to define conditions
    SELECT col1,col2 FROM table_name
    WHERE conditions1 AND conditon2;

    - operators:🔸AND - to check for both conditions to be true
                🔸OR  - to check for one of the conditions to be true
                🔸IN  - matches any value in the list
                🔸NOT - to negate the given condition
                🔸BETWEEN - selects for given range

   Exp: SELECT  email,name  FROM user
        WHERE  email IN ("dev@gmail.com","muku@gmail.com");   

   Exp: SELECT  age,name  FROM user
        WHERE  age NOT IN (15, 18);   

2️⃣ LIMIT Clause
    
    Exp:  SELECT name,age,email 
          FROM user
          LIMIT 2;   


3️⃣ Order by Clause - to sort in ascending (ASC) or descending order (DESC)

   Exp:  SELECT name ,age , followers
         FROM user
         ORDER BY followers ASC;


4️⃣ Aggregate Function - Aggregate function perform a calculation on a set of values, and return a single value.

    🔸COUNT()
    🔸MAX()
    🔸MIN()
    🔸SUM()
    🔸AVG()

   Exp: SELECT max(followers)
        FROM user;

   Exp: SELECT count(age)
        FROM user
        WHERE age = 14;
     

5️⃣ Group by Clause - Group rows that have the same values into summary rows.
                     It collects data from multiple records and groups that the result by one or more columns 
                   * Generally we use group by with some aggregation function *

        Exp: SELECT count(id)
             FROM user
             GROUP BY age;

        Exp: SELECT age, max(followers)
             FROM user
             GROUP BY age; 


6️⃣ Having Clause - Similar to where i.e applies some condition on rows.
                   But is used when we want to apply any condition after grouping.
                   * WHERE is for the table, HAVING is for a group
                   * Grouping is necessary for HAVING

            Exp: SELECT age, max(followers)
                 FROM user
                 GROUP BY age
                 HAVING max(followers)>200;            

7️⃣ General Order 
              
              🔸SELECT column(s)
              🔸FROM table_name
              🔸WHERE condition
              🔸GROUP BY column(s)
              🔸HAVING condition
              🔸ORDER BY column(s)ASC;


 ---------------- Example👇 ---------------

   👉 CREATE DATABASE IF NOT EXISTS collage;

   👉 use collage;

   👉 create table class(
    id int primary key,
    student int
    );

   👉 create table subclass (
    sub_id int primary key,
    chapter varchar(30),
    foreign key (sub_id) references class(id)
    );

   👉 INSERT INTO class (id,student)
        VALUES 
        (1,20), 
        (2,30); 

   👉 SELECT id,student FROM class;

   👉 SELECT * FROM class
      WHERE student>20;



 
